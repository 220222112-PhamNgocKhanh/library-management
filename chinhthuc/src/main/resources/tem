import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.collections.FXCollections;
import javafx.geometry.Insets;
import javafx.geometry.Pos;

public class BorrowHistoryDialog extends Application {

    private int selectedBorrowerId;
    private Main mainInstance;
    private TableView<BorrowHistory> historyTable;
    private ObservableList<BorrowHistory> historyList;

    public BorrowHistoryDialog(int borrowerId, Main mainInstance) {
        this.selectedBorrowerId = borrowerId;
        this.mainInstance = mainInstance;
    }

    @Override
    public void start(Stage primaryStage) {
        Stage historyStage = new Stage();
        historyStage.initModality(Modality.APPLICATION_MODAL);
        historyStage.setTitle("Lịch sử mượn");

        // Initialize table
        historyTable = new TableView<>();
        historyList = FXCollections.observableArrayList();

        TableColumn<BorrowHistory, Integer> idDocumentCol = new TableColumn<>("ID Sách");
        idDocumentCol.setCellValueFactory(new PropertyValueFactory<>("idDocument"));

        TableColumn<BorrowHistory, String> titleCol = new TableColumn<>("Tên Sách");
        titleCol.setCellValueFactory(new PropertyValueFactory<>("title"));

        TableColumn<BorrowHistory, Date> borrowDateCol = new TableColumn<>("Ngày mượn");
        borrowDateCol.setCellValueFactory(new PropertyValueFactory<>("borrowDate"));

        TableColumn<BorrowHistory, Date> returnDateCol = new TableColumn<>("Ngày trả");
        returnDateCol.setCellValueFactory(new PropertyValueFactory<>("returnDate"));

        TableColumn<BorrowHistory, String> statusCol = new TableColumn<>("Trạng thái");
        statusCol.setCellValueFactory(new PropertyValueFactory<>("status"));

        historyTable.getColumns().addAll(idDocumentCol, titleCol, borrowDateCol, returnDateCol, statusCol);
        loadHistoryForBorrower();

        // Set row factory to apply CSS classes based on status
        historyTable.setRowFactory(tv -> new TableRow<BorrowHistory>() {
            @Override
            protected void updateItem(BorrowHistory item, boolean empty) {
                super.updateItem(item, empty);
                if (item == null) {
                    setStyle("");
                } else {
                    getStyleClass().removeAll("borrowed", "overdue", "returned");
                    getStyleClass().add(item.getStatus());
                }
            }
        });

        // Buttons for add, edit, delete
        HBox buttonBox = new HBox(20);
        Button returnButton = new Button("Trả");
        returnButton.setPrefWidth(150);
        returnButton.setStyle("-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-font-weight: bold;");

        Button editButton = new Button("Sửa");
        editButton.setPrefWidth(150);
        editButton.setStyle("-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-font-weight: bold;");

        Button deleteButton = new Button("Xóa");
        deleteButton.setPrefWidth(150);
        deleteButton.setStyle("-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-font-weight: bold;");

        Button cancelButton = new Button("Thoát");
        cancelButton.setPrefWidth(150);
        cancelButton.setStyle("-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-font-weight: bold;");

        buttonBox.getChildren().addAll(returnButton, editButton, deleteButton, cancelButton);
        buttonBox.setAlignment(Pos.CENTER);

        // Main layout
        VBox layout = new VBox(10);
        layout.setPadding(new Insets(10));
        layout.getChildren().addAll(historyTable, buttonBox);

        // Scene and Stage
        Scene scene = new Scene(layout, 900, 700);
        scene.getStylesheets().add(getClass().getResource("/path/to/styles.css").toExternalForm());
        historyStage.setScene(scene);
        historyStage.show();

        // Nut tra
        returnButton.setOnAction(e -> {
            BorrowHistory selectedHistory = historyTable.getSelectionModel().getSelectedItem();
            if (selectedHistory != null) {
                returnDocument(selectedHistory, selectedBorrowerId);
            } else {
                showAlert("Lỗi", "Vui lòng chọn một lịch sử mượn để trả!", Alert.AlertType.ERROR);
            }
        });

        // Nut sua
        editButton.setOnAction(e -> {
            BorrowHistory selected = historyTable.getSelectionModel().getSelectedItem();
            if (selected == null) {
                showAlert("Lỗi", "Vui lòng chọn lịch sử để sửa!", AlertType.ERROR);
                return;
            }
            editHistory(selected, mainInstance);
        });

        // Nut xoa
        deleteButton.setOnAction(e -> {
            BorrowHistory selected = historyTable.getSelectionModel().getSelectedItem();
            if (selected == null) {
                showAlert("Lỗi", "Vui lòng chọn lịch sử để xóa!", AlertType.ERROR);
                return;
            }
            deleteHistory(selected, mainInstance);
        });

        cancelButton.setOnAction(e -> historyStage.close());
    }

    private void loadHistoryForBorrower() {
        // Load data for historyList here
    }

    private void returnDocument(BorrowHistory selectedHistory, int selectedBorrowerId) {
        // Handle return document logic here
    }

    private void showAlert(String title, String message, Alert.AlertType alertType) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void editHistory(BorrowHistory selected, Main mainInstance) {
        // Handle edit history logic here
    }

    private void deleteHistory(BorrowHistory selected, Main mainInstance) {
        // Handle delete history logic here
    }

    public static void main(String[] args) {
        launch(args);
    }
}

class BorrowHistory {
    private int idDocument;
    private String title;
    private Date borrowDate;
    private Date returnDate;
    private String status;

    // Getters and setters
}
